import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

public class RsaUtilTest {

  public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException,
      BadPaddingException, UnsupportedEncodingException {
    RsaUtil.RsaKey rsaKey = RsaUtil.generateKeyPair();
    PublicKey publicKey = rsaKey.getPublicKey();
    PrivateKey privateKey = rsaKey.getPrivateKey();

    String strPublicKey = RsaUtil.byteArrayToHex(publicKey.getEncoded());
    String strPrivateKey = RsaUtil.byteArrayToHex(privateKey.getEncoded());
    System.out.println("publicKey : " + strPublicKey);
    System.out.println("privateKey : " + strPrivateKey);

    String plainText = "머0ㄴㅇㄹ92ㅡㅔㅇㄹ-ㄴ90ㅎ-ㅕ3ㄷ2sd22!";
    String encryptedText = RsaUtil.encryptRsa(strPublicKey, plainText);
    String decryptedText = RsaUtil.decryptRsa(strPrivateKey, encryptedText);

    System.out.println("encryptedText:" + encryptedText);
    System.out.println("decryptedText:" + decryptedText);

    /**
     * Result
     * 
     * <pre>
     * publicKey : 30819F300D06092A864886F70D010101050003818D0030818902818100AB9861917B3A5A40C423D91A10D099A461926D25A7ED168C79B0E89D62D91992E7E23064BEB4EE6B5F1810F4C01C1C86D312B098F5F016BABC09A9AB41E25FBBBEA2CDB5B68A5868DA09B221545D37C265CD88EAF107D514C252123C6E29F09C9ABA339C9C04CBA9365EBB4E0B04670C821F94E32AEDC9EE56ECC10F7991ECEB0203010001
     * privateKey : 30820276020100300D06092A864886F70D0101010500048202603082025C02010002818100AB9861917B3A5A40C423D91A10D099A461926D25A7ED168C79B0E89D62D91992E7E23064BEB4EE6B5F1810F4C01C1C86D312B098F5F016BABC09A9AB41E25FBBBEA2CDB5B68A5868DA09B221545D37C265CD88EAF107D514C252123C6E29F09C9ABA339C9C04CBA9365EBB4E0B04670C821F94E32AEDC9EE56ECC10F7991ECEB020301000102818044794235F39E8D755ACF934ABB7B02547E3B1822F6A7BD5FC10FBF434EB6A365E3F276AD3D0CA637627310111AB81D0A10205D282CBBE9D60A4330D98E28EF5A2B0490734F091DA59C3B12E16B475AAD8EFEDB47E47CA6786475CD28D57A048357BCD7B994B8B117002FBA9FC36019588FC3065E2DD155751EB45709D0F07E01024100F125E0321686C1DD3849779DDE0DFAFBB38BA474850CA8D44CA1BCFBC52BBF5E1F1BE7021C2AF8E9CB9CE0945919879E64F5657477F99F1CC5820AFC043DEEE1024100B629E23D124E2C4A111A5FAADEED0E0DF17D6306AC771C622EE9B82C5A06F19A4CF164950D6A685355B43360FCDCE31AB390DEAE7B5B819A51580453C090114B024008F1EDBA0DE9DBC117F869AE7A712C512FDCCB31E3498FEDA8160BCB8F09CB647364F691B677C599EE8A982E088C10E2C83DEE107EEECC7F25B8682DE6FE612102410093F6C76695E4DB82BA0BB32386FA048D7CD73D4561774A9DD1BF5432EA59738BC2EDDCA65984520346BD1D72AD51FA426912C65DF1A32D4D9CBF229CA8F01CAB02406C333E0742604FF058CD9F28729FFA91C2E66DB5ACC95B46564DF258FFC35CC26A6EF356C3A913C05C6233CD446B26A2A6160D83050BD049010D9DDDEF550E69
     * encryptedText:677DEF523952464789B3134675B14AE9E6D5953CDB7F6768AE3FE9470A29E598336D5431D7E4649B6519BEC0562016918492B9C3643351DC9D2DD2D8E0A0720F03C9992CD12BD47BA6BDD6DC7A66ABA07EABFE4FFB81DCCD51244448B2E85CC93CACF1EEDE5F1E2A4DB6229F9D939CA96CB70C00CAB3A1E13887E601D006FC56
     * decryptedText:머0ㄴㅇㄹ92ㅡㅔㅇㄹ-ㄴ90ㅎ-ㅕ3ㄷ2sd22!
     * </pre>
     */
  }
}
